package com.rabbitmq.demo.direct;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.demo.utils.ConnectUtils;

import java.io.IOException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeoutException;

/**
 * @ClassName PSProducer
 * @Descriptio
 *
 * @Author shanghao5
 * @Date 2018/11/28 16:07
 **/
public class PSProducer {

    private final static String EXCHANGE_NAME = "shanghao_exchange";
    private final static String ROUTING_KEY = "shanghao_exchange";
    private static int sendCoundPerSecond = 10000;


    public static void main(String[] args) throws IOException, TimeoutException, KeyManagementException, NoSuchAlgorithmException {
        /* 获取一个连接 */
        Connection connection = ConnectUtils.getConnect();
        /*从连接中创建通道*/
        Channel channel = connection.createChannel();
        //fanout 分裂
        channel.exchangeDeclare(EXCHANGE_NAME,"direct");

        // 消息内容
        String message = "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n" +
                "1111111111111111111";


        while (true){
            int sendCountBySecond = 0;
            long timeInterval = 0;
            long startTime = 0;
            while (sendCountBySecond < sendCoundPerSecond && timeInterval < 1000){
                if(sendCountBySecond == 0){
                    startTime = System.currentTimeMillis();
                    System.out.println("startTime: "+ startTime);
                }
                channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, null, message.getBytes());
                sendCountBySecond++;
                timeInterval = System.currentTimeMillis() - startTime;
                // 清空处理
                if(sendCountBySecond >= sendCoundPerSecond){
                    System.out.println("sendCountBySecond:"+ sendCountBySecond+";timeInterval:"+timeInterval);
                    // 1000条已经发送完毕，需要等1s结束
                    if(timeInterval<1000){
                        try {
                            Thread.sleep(1000-timeInterval);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    sendCountBySecond = 0;
                    timeInterval = 0;
                }
            }
        }


//        channel.close();
//        connection.close();

    }




}
